#!/usr/bin/perl

use strict;
$| = 1;

use Data::Dumper;
use File::Basename;
use Cwd 'abs_path';
my $script_dir = dirname(abs_path($0));
require "$script_dir/common.pl";
my $src_dir = dirname($script_dir);

my $do_direct = 0;
my $do_fuse = 1;
my $do_defuse = 0;

my $stype = shift or die "Usage: backup stype ttype\n";
my $ttype = shift or die "Usage: backup stype ttype\n";

my @types = ("ext4", "jfs", "fat", "tmpfs");
if(not in_set($stype, @types)) {
	die "Invalid benchmark type: $stype\n";
}
if(not in_set($ttype, @types)) {
	die "Invalid benchmark type: $ttype\n";
}

my $src_dir = dirname(dirname(abs_path($0)));

my $file_count = 60000;
my $source_path = "$stype/test";
my $target_path = "$ttype/test";

my $direct_base = "/mnt";
my $direct_source = "$direct_base/$source_path";
my $direct_target = "$direct_base/$target_path";

my $defuse_base = "/tmp/tmpdir";
my $defuse_source = "$defuse_base/$source_path";
my $defuse_target = "$defuse_base/$target_path";

my $fuse_source_mount = "/tmp/tmpdirS";
my $fuse_target_mount = "/tmp/tmpdirT";
my $fuse_source = "$fuse_source_mount$direct_source";
my $fuse_target = "$fuse_target_mount$direct_target";
my $fusemount = "$src_dir/fuse/fusexmp";
my $fusermount = "/bin/fusermount";

#my $fuse_path = "$defuse_path/$direct_path";
#my $fuse_backend_target = $direct_path;
#my $fuse_avfs_path = "/tmp/tmpdir/";
#my $fuse_avfs_target = "$fuse_avfs_path/mnt/tmpfs/test.tar.gz#/test";
#my $child_test_defuse_path = "/tmp/testdir/test";
#my $fuse_child_test_defuse_path = "$child_test_defuse_path/$direct_path";

my $lddefuse = "$src_dir/lddefuse/liblddefuse.mnt.so";
my $copyCmd = "$src_dir/fuse/doCopy";
my $iterations = 50;

sub resetMounts {
	# Unmount FUSE
	system_or_continue("$fusermount -u $fuse_source_mount");
	system_or_continue("$fusermount -u $fuse_target_mount");

	# Reset mount point contents
	system_or_continue("rm -rf $defuse_base");
	system_or_continue("mkdir -p $defuse_base");
	system_or_continue("rm -rf $fuse_source_mount");
	system_or_continue("mkdir -p $fuse_source_mount");
	system_or_continue("rm -rf $fuse_target_mount");
	system_or_continue("mkdir -p $fuse_target_mount");

	# Remove DEFUSE shared spaces
	system_or_continue("rm -rf /tmp/DEFUSE_*");

	return;

	# Reset system mounts for backend file systems
	for(@types) {
		system_or_continue("/usr/bin/sudo /bin/umount /mnt/$_");
	}
	for(0 .. $#types) {
		my $fs_type = $types[$_];
		my $dev_num = $_+1;
		if($fs_type eq "fat") {
			system_or_die("/usr/bin/sudo /bin/mount /dev/sda$dev_num /mnt/$fs_type -o rw,uid=\$(id -u),gid=\$(id -g)");
		} elsif($fs_type eq "tmpfs") {
			system_or_die("/usr/bin/sudo /bin/mount -t tmpfs -o size=768m tmpfs /mnt/$fs_type");
		} else {
			system_or_die("/usr/bin/sudo /bin/mount /dev/sda$dev_num /mnt/$fs_type");
		}
	}
	for(@types) {
		system_or_die("/usr/bin/sudo /bin/chmod 777 /mnt/$_");
		system_or_die("/bin/mkdir -p /mnt/$_/test");
	}
}

sub doRunTrial {
	my $command = shift;
	system_or_continue("rm -rf /tmp/DEFUSE_*");
	system_or_die("sudo sync");
	sleep 1;
	system_or_die("rm -f $direct_target/*");
	my $result = system_or_die($command);
	chomp $result;
	return $result;
}

sub runTest {
	my $cpy_src = shift;
	my $cpy_tgt = shift;
	my $prefix = shift;

	my @results;
	for(1 .. $iterations) {
		print " $_";
		my $testCmd = "$prefix $copyCmd $cpy_src $cpy_tgt $file_count";
		my $result = doRunTrial($testCmd);
		push @results, $result;
	}
	return @results;
}


if($do_direct) {
	# DIRECT
	print "DIRECT:\n";
	resetMounts();
	my @direct = runTest($direct_source, $direct_target);
	printf "\ndirect, %s\n", join(', ', @direct);
}

# DEFUSE
if($do_defuse) {
	print "DEFUSE:\n";
	resetMounts();
	my @defuse = runTest($defuse_source, $defuse_target, "LD_PRELOAD=$lddefuse");
	printf "\ndefuse, %s\n", join(', ', @defuse);
}

#FUSE
if($do_fuse) {
	print "FUSE:\n";
	resetMounts();
	system_or_die("$fusemount $fuse_source_mount");
	system_or_die("$fusemount $fuse_target_mount");
	my @fuse = runTest($fuse_source, $fuse_target);
	system_or_continue("$fusermount -u $fuse_target_mount");
	system_or_continue("$fusermount -u $fuse_source_mount");
	printf "\nfuse, %s\n", join(', ', @fuse);

	# FUSE Test Direct I/O
	print "FUSE DIRECT IO:\n";
	resetMounts();
	system_or_die("$fusemount -o direct_io $fuse_source_mount");
	system_or_die("$fusemount -o direct_io $fuse_target_mount");
	my @fuse_direct = runTest($fuse_source, $fuse_target);
	system_or_continue("$fusermount -u $fuse_target_mount");
	system_or_continue("$fusermount -u $fuse_source_mount");
	printf "fuse_direct, %s\n", join(', ', @fuse_direct);
}
