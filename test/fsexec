#!/usr/bin/perl

use strict;

use List::Util qw(sum);
use Data::Dumper;
use File::Basename;
use Cwd 'abs_path';
my $script_dir = dirname(abs_path($0));
require "$script_dir/common.pl";
my $src_dir = dirname($script_dir);

$| = 1;
#set_system_echo();
my $do_direct = 1;
my $do_fuse = 0;
my $do_defuse = 1;

my $type = shift or die "Usage: fsexec test\n";
my @file_range = map{ $_ * 100 } (1 .. 40);

my $fuse_mount_path = "/tmp/tmpdir";
my $direct_path = "/mnt/$type/test";
my $defuse_path = "$fuse_mount_path/$type/test";
my $defuse_backend = "/mnt/$type";
my $fuse_path = "$fuse_mount_path$direct_path";

#my $time_command = "/usr/bin/time -f \"%w\" 2>&1";
my $time_command = "";

my $benchmark = "$time_command $src_dir/test/doExecTest";

my @types = ("ext4", "jfs", "fat", "tmpfs");
if(not in_set($type, @types)) {
	die "Invalid benchmark type: $type\n";
}

my $fusemount = "$src_dir/fuse/fusexmp";
my $fusermount = "/bin/fusermount";

my $lddefusefs = "$src_dir/lddefuse/liblddefuse.mnt.so";

my $trials = 50;

sub resetMounts {
	# Unmount FUSE
	system_or_continue("$fusermount -u $fuse_mount_path");

	# Unmount DEFUSE
	system_or_continue("/usr/bin/sudo /bin/umount $fuse_mount_path");

	# Reset mount point contents
	system_or_continue("rm -rf $fuse_mount_path");
	system_or_continue("mkdir -p $fuse_mount_path");

	# Remove DEFUSE shared spaces
	system_or_continue("rm -rf /tmp/DEFUSE_*");

	# Reset system mounts for backend file systems
	for(@types) {
		system_or_continue("/usr/bin/sudo /bin/umount /mnt/$_");
	}
=pub
	for(0 .. $#types) {
		my $fs_type = $types[$_];
		my $dev_num = $_+1;
		if($fs_type eq "fat") {
			system_or_die("/usr/bin/sudo /bin/mount /dev/sda$dev_num /mnt/$fs_type -o rw,uid=\$(id -u),gid=\$(id -g)");
		} elsif($fs_type eq "tmpfs") {
			system_or_die("/usr/bin/sudo /bin/mount -t tmpfs -o size=768m tmpfs /mnt/$fs_type");
		} else {
			system_or_die("/usr/bin/sudo /bin/mount /dev/sda$dev_num /mnt/$fs_type");
		}
	}
=cut
	for(@types) {
		system_or_die("/usr/bin/sudo /bin/chmod 777 /mnt/$_");
		system_or_die("/bin/mkdir -p /mnt/$_/test");
	}
}

sub doRunTrial {
	my $command = shift;
	# Remove DEFUSE shared spaces
	system_or_continue("rm -rf /tmp/DEFUSE_*");
	system_or_die("sudo sync");
	sleep 1;
	#system_or_die("sudo echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null");
	my @result = split(/\n/, system_or_die($command));
	chomp $result[0];
	return $result[0];
}

sub runTrials {
	my $benchmark_command = shift;
	my $target_path = shift;
	my $backend_target_path = shift;
	my $files = shift;
		
	my $cmd = "$benchmark_command $target_path $files";
	
	my @results;
	for(1..$trials) {
		print " $_";
		if ($backend_target_path) {
			system_or_die("rm -f $backend_target_path/*");
		}
		push @results, doRunTrial($cmd);
	}
	print "\n";
	return [@results];
}

my $results;

for(@file_range) {
	my $files = $_;

	if($do_direct) {
		# Direct Mount Test
		print "DIRECT:\n";
		resetMounts();
		$results->{'direct'}->{$files} = runTrials($benchmark, $direct_path, $direct_path, $files);
	}

	if($do_fuse) {
		# FUSE Test
		print "FUSE:\n";
		resetMounts();
		system_or_die("$fusemount $fuse_mount_path");
		$results->{'fuse'}->${files} = runTrials($benchmark, $fuse_path, $direct_path, $files);
		system_or_die("$fusermount -u $fuse_mount_path");
		
		# FUSE Test Direct I/O
		print "FUSE DIRECT IO:\n";
		resetMounts();
		system_or_die("$fusemount -o direct_io $fuse_mount_path");
		$results->{'fuse_direct'}->{$files} = runTrials($benchmark, $fuse_path, $direct_path, $files);
		system_or_continue("$fusermount -u $fuse_mount_path");
	}

	if($do_defuse) {
		# DEFUSE Test
		print "DEFUSE:\n";
		resetMounts();
		#system_or_die("/usr/bin/sudo /bin/mount -t proxyfs -o backend=$defuse_backend /dev/null $fuse_mount_path");
		$results->{'defusefs'}->{$files} = runTrials("LD_PRELOAD=$lddefusefs $benchmark", $defuse_path, $direct_path, $files);
		#system_or_die("/usr/bin/sudo /bin/umount $fuse_mount_path");
	}

	# Print results
	for(keys %{$results}) {
		my $fs = $_;
		for(sort {$a <=> $b} keys %{$results->{$fs}}) {
			my $files = $_;
			print "$fs, $files, " . join(',', @{$results->{$fs}->{$files}}) . "\n";
		}
	}
}
