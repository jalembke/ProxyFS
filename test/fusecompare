#!/usr/bin/perl

use strict;

use List::Util qw(sum);
use Data::Dumper;
use File::Basename;
use Cwd 'abs_path';
my $script_dir = dirname(abs_path($0));
require "$script_dir/common.pl";
my $src_dir = dirname($script_dir);

$| = 1;
#set_system_echo();
my $do_direct = 1;
my $do_fuse = 1;
my $do_defuse = 1;

my $type = shift or die "Usage: compare test size [fork]\n";
my $size = shift or die "Usage: compare test size [fork]\n";
my $fork = shift;

my $fuse_mount_path = "/tmp/tmpdir";
my $direct_path = "/mnt/$type/test";
my $defuse_path = "$fuse_mount_path/$type/test";
my $defuse_backend = "/mnt/$type";
my $fuse_path = "$fuse_mount_path$direct_path";

my $fuse_avfs_path = "/tmp/tmpdir/";
my $fuse_avfs_target = "$fuse_avfs_path/mnt/tmpfs/test.tar.gz#/test";
my $child_test_defuse_path = "/tmp/testdir/test";
my $fuse_child_test_defuse_path = "$child_test_defuse_path/$direct_path";

my $time_command = "/usr/bin/time -f \"%w\" 2>&1";
#my $time_command = "";

my $benchmark = "$time_command $src_dir/fuse/fusetest";
if($fork) {
	$benchmark = "$benchmark f";
}
my $files = 0;
if($size eq 's') {
	$files = 4096;
} elsif($size eq 'm') {
	$files = 2048;
} elsif($size eq 'l') {
	$files = 1;
}  elsif($size eq 'r') {
	$files = 60000;
} else {
	die "Invalid benchmark size: $size\n";
}

my @types = ("ext4", "jfs", "fat", "tmpfs");
if(not in_set($type, @types)) {
	die "Invalid benchmark type: $type\n";
}

my $fusemount = "$src_dir/fuse/fusexmp";
my $fusermount = "/bin/fusermount";
my $fuseavfsmount = "/usr/bin/avfsd";

my $lddefusefs = "$src_dir/lddefuse/liblddefuse.mnt.so";

my $trials = 50;
my $threads = 1;

sub resetMounts {
	# Unmount FUSE
	system_or_continue("$fusermount -u $fuse_mount_path");

	# Unmount DEFUSE
	system_or_continue("/usr/bin/sudo /bin/umount $fuse_mount_path");

	# Reset mount point contents
	system_or_continue("rm -rf $fuse_mount_path");
	system_or_continue("mkdir -p $fuse_mount_path");

	# Reset system mounts for backend file systems
	for(@types) {
		system_or_continue("/usr/bin/sudo /bin/umount /mnt/$_");
	}
	for(0 .. $#types) {
		my $fs_type = $types[$_];
		my $dev_num = $_+1;
		if($fs_type eq "fat") {
			system_or_die("/usr/bin/sudo /bin/mount /dev/sda$dev_num /mnt/$fs_type -o rw,uid=\$(id -u),gid=\$(id -g)");
		} elsif($fs_type eq "tmpfs") {
			system_or_die("/usr/bin/sudo /bin/mount -t tmpfs -o size=512m tmpfs /mnt/$fs_type");
		} else {
			system_or_die("/usr/bin/sudo /bin/mount /dev/sda$dev_num /mnt/$fs_type");
		}
	}
	for(@types) {
		system_or_die("/usr/bin/sudo /bin/chmod 777 /mnt/$_");
		system_or_die("/bin/mkdir -p /mnt/$_/test");
	}
}

sub doRunTrial {
	my $command = shift;
	system_or_die("sudo sync");
	#sleep 1;
	system_or_die("sudo echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null");
	my @result = split(/\n/, system_or_die($command));
	chomp $result[0];
	chomp $result[1];
	my $trial_results;
	$trial_results->{'time'} = $result[0];
	$trial_results->{'ctxsw'} = $result[1];
	return $trial_results;
}

sub runTrials {
	my $benchmark_command = shift;
	my $target_path = shift;
	my $backend_target_path = shift;
		
	my $write_cmd = "$benchmark_command w $size $target_path $threads $files";
	my $read_cmd = "$benchmark_command r $size $target_path $threads $files";
	
	my @write_results;
	my @read_results;
	for(1..$trials) {
		print " $_";
		if ($backend_target_path) {
			system_or_die("rm -f $backend_target_path/*");
		}
		push @write_results, doRunTrial($write_cmd);
		push @read_results, doRunTrial($read_cmd);
	}
	print "\n";
	return [[@write_results], [@read_results]];
}


my $results;

=pub
if($type eq "avfs") {
	doSystem(1, "$fusermount -u $fuse_avfs_path");
	my @read_results;
	for(1..$trials) {
		doSystem(0, "$fuseavfsmount $fuse_avfs_path");
		print "$benchmark r $fuse_avfs_target $threads $files\n";
		my $trial_result = `$benchmark r $fuse_avfs_target $threads $files`;
		chomp $trial_result;
		push @read_results, $trial_result;
		doSystem(1, "$fusermount -u $fuse_avfs_path");
	}
	printf "R: avfs, %s\n", join(', ', @read_results);
	exit;
	doSystem(0, "mkdir $defusefs_path");
	doSystem(1, "mkdir /tmp/blah");
	doSystem(0, "/usr/bin/sudo /bin/mount -t defusefs -o backend=/tmp/blah /dev/null $defusefs_path");
	my @read_results;
	for(1..$trials) {
		print "LD_PRELOAD=$lddefusefs $benchmark r $defusefs_path $threads $files\n";
		my $trial_result = `LD_PRELOAD=$lddefusefs $benchmark r $defusefs_path $threads $files`;
		chomp $trial_result;
		push @read_results, $trial_result;
	}
	doSystem(1, "/usr/bin/sudo /bin/umount $defusefs_path");
	doSystem(1, "rmdir $defusefs_path");
	printf "R: defuse_avfs, %s\n", join(', ', @read_results);
	exit;
}
=cut

if($do_direct) {
	# Direct Mount Test
	print "DIRECT:\n";
	resetMounts();
	$results->{'direct'} = runTrials($benchmark, $direct_path, $direct_path);
}

if($do_fuse) {
	# FUSE Test
	print "FUSE:\n";
	resetMounts();
	system_or_die("$fusemount $fuse_mount_path");
	$results->{'fuse'} = runTrials($benchmark, $fuse_path, $direct_path);
	system_or_die("$fusermount -u $fuse_mount_path");
	
	# FUSE Test Direct I/O
	print "FUSE DIRECT IO:\n";
	resetMounts();
	system_or_die("$fusemount -o direct_io $fuse_mount_path");
	$results->{'fuse_direct'} = runTrials($benchmark, $fuse_path, $direct_path);
	system_or_continue("$fusermount -u $fuse_mount_path");
}

if($do_defuse) {
	# DEFUSE Test
	print "DEFUSE:\n";
	resetMounts();
	#system_or_die("/usr/bin/sudo /bin/mount -t proxyfs -o backend=$defuse_backend /dev/null $fuse_mount_path");
	$results->{'defusefs'} = runTrials("LD_PRELOAD=$lddefusefs $benchmark", $defuse_path, $direct_path);
	#system_or_die("/usr/bin/sudo /bin/umount $fuse_mount_path");
}

# Print results
for(keys %{$results}) {
	printf "WT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[0]});
	printf "RT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[1]});
	printf "WX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[0]});
	printf "RX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[1]});
}
