#!/usr/bin/perl

use strict;

use Data::Dumper;
use File::Basename;
use Cwd 'abs_path';
our ($direct_path, $fuse_path, $usfsal_path);
my $script_dir = dirname(abs_path($0));
require "$script_dir/common.pl";
my $src_dir = dirname($script_dir);

my $type = shift;

$| = 1;
my $do_direct = 0;
my $do_fuse = 0;
my $do_usfsal = 0;

if($type eq 'd') {
	$do_direct = 1;
	$do_fuse = 1;
}
if($type eq 'u') {
	$do_usfsal = 1;
}

my $backend_dev = "/dev/sdb1";
my $backend_type = "tmpfs";

my $time_command = "/usr/bin/time -f \"%w\" 2>&1";
#my $time_command = "";

my $benchmark = "$time_command $src_dir/test/doTest";
my $files = 4096;
my $size = 'vs';

my $trials = 50;
my $threads =1;

sub doRunTrial {
	my $command = shift;
	# Remove usfsal shared spaces
	system_or_continue("rm -rf /tmp/usfsal_*");
	drop_caches();
	my @result = split(/\n/, system_or_die($command));
	chomp $result[0];
	chomp $result[1];
	my $trial_results;
	$trial_results->{'time'} = $result[0];
	$trial_results->{'ctxsw'} = $result[1];
	return $trial_results;
}

sub runTrials {
	my $benchmark_command = shift;
	my $target_path = shift;
	my $backend_target_path = shift;
		
	my $write_cmd = "$benchmark_command w $size $target_path $threads $files";
	my $read_cmd = "$benchmark_command r $size $target_path $threads $files";
	
	my @write_results;
	my @read_results;
	for(1..$trials) {
		print " $_";
		if ($backend_target_path) {
			system_or_die("rm -f $backend_target_path/*");
		}
		push @write_results, doRunTrial($write_cmd);
		push @read_results, doRunTrial($read_cmd);
	}
	print "\n";
	return [[@write_results], [@read_results]];
}

my $results;

if($do_direct) {
	# Direct Mount Test
	print "DIRECT:\n";
	reset_mounts($backend_dev, $backend_type);
	$results->{'direct'} = runTrials($benchmark, $direct_path, $direct_path);
}

if($do_fuse) {
	# FUSE Test
	print "FUSE:\n";
	reset_mounts($backend_dev, $backend_type);
	mount_frontend("fuse");
	$results->{'fuse'} = runTrials($benchmark, $fuse_path, $direct_path);
	umount_frontend("fuse");
	
	# FUSE Test Direct I/O
	print "FUSE DIRECT IO:\n";
	reset_mounts($backend_dev, $backend_type);
	mount_frontend("fuse_direct");
	$results->{'fuse_direct'} = runTrials($benchmark, $fuse_path, $direct_path);
	umount_frontend("fuse_direct");
}

if($do_usfsal) {
	# usfsal Test
	print "USFSAL:\n";
	reset_mounts($backend_dev, $backend_type);
	mount_frontend("usfsal");
	$results->{'usfsalfs'} = runTrials("$benchmark", $usfsal_path, $direct_path);
	umount_frontend("usfsal");
}

# Print results
for(keys %{$results}) {
	printf "WT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[0]});
	printf "RT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[1]});
	printf "WX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[0]});
	printf "RX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[1]});
}
