#!/usr/bin/perl

use strict;

use Data::Dumper;
use File::Basename;
use Cwd 'abs_path';
our ($direct_path, $fuse_path, $usfsal_path, $fuse_avfs_path, $usfsal_avfs_path, $ldpreload_library, $ldpreload_avfs_library);
my $script_dir = dirname(abs_path($0));
require "$script_dir/common.pl";
my $src_dir = dirname($script_dir);

my $type = shift;
my $size = shift;

$| = 1;
my $do_direct = 0;
my $do_fuse = 0;
my $do_usfsal = 0;
my $do_avfs_fuse = 0;
my $do_avfs_usfsal = 0;
my $do_ld_preload = 0;
my $do_ld_avfs = 0;

if($type eq 'd') {
	$do_direct = 1;
	#$do_fuse = 1;
	#$do_avfs_fuse = 1;
}
if($type eq 'u') {
	$do_usfsal = 1;
	#$do_avfs_usfsal = 1;
}
if($type eq "l") {
	#$do_ld_avfs = 1;
	$do_ld_preload = 1;
}

my %backend_devs = (
	#"ext4" => "/dev/sdb1",
	#"jfs" => "/dev/sdb2",
	#"vfat" => "/dev/sdb3",
	"tmpfs" => "none",
);

my $time_command = "/usr/bin/time -f \"%w\" 2>&1";
#my $time_command = "";

my $benchmark = "$time_command $src_dir/test/doTest";
my $files = 1;
my $avfs_target = "test.tar.gz_l";

if ($size eq "v") {
	$files = 4096;
	$avfs_target = "test.tar.gz_s";
}
if ($size eq "m") {
	$files = 2048;
	$avfs_target = "test.tar.gz_m";
}

my $trials = 10;
my $threads = 1;

sub doRunTrial {
	my $command = shift;
	# Remove usfsal shared spaces
	system_or_continue("rm -rf /tmp/usfsal_*");
	drop_caches();
	#print "$command\n";
	my @result = split(/\n/, system_or_die($command));
	chomp $result[0];
	chomp $result[1];
	my $trial_results;
	$trial_results->{'time'} = $result[0];
	$trial_results->{'ctxsw'} = $result[1];
	return $trial_results;
}

sub runTrials {
	my $benchmark_command = shift;
	my $target_path = shift;
	my $backend_target_path = shift;
	my $skip_write = shift;
		
	my $write_cmd = "$benchmark_command w $size $target_path $threads $files";
	my $read_cmd = "$benchmark_command r $size $target_path $threads $files";
	
	my @write_results;
	my @read_results;
	for(1..$trials) {
		print " $_";
		if ($backend_target_path and $skip_write != 1) {
			system_or_die("rm -f $backend_target_path/*");
		}
		push @write_results, doRunTrial($write_cmd) unless $skip_write == 1;
		push @read_results, doRunTrial($read_cmd);
	}
	print "\n";
	return [[@write_results], [@read_results]];
}

my $results;

if ($do_avfs_fuse) {
	#AVFS FUSE
	print "AVFS FUSE:\n";
	reset_mounts("none", "tmpfs");
	mount_frontend("avfs");
	copy_avfs_target($avfs_target);
	$results->{"avfs"} = runTrials($benchmark, $fuse_avfs_path, $direct_path, 1);
	umount_frontend("avfs");
	umount_frontend("tmpfs");
	
	#AVFS FUSE DIRECT
	print "AVFS FUSE DIRECT:\n";
	reset_mounts("none", "tmpfs");
	mount_frontend("avfs_direct");
	copy_avfs_target($avfs_target);
	$results->{"avfs_direct"} = runTrials($benchmark, $fuse_avfs_path, $direct_path, 1);
	umount_frontend("avfs_direct");
	umount_frontend("tmpfs");
}
if ($do_avfs_usfsal) {
	#USFSAL AVFS
	print "USFSAL AVFS:\n";
	reset_mounts("none", "tmpfs");
	mount_frontend("usfsal");
	copy_avfs_target($avfs_target);
	$results->{'usfsal_avfs'} = runTrials("$benchmark", $usfsal_avfs_path, $direct_path, 1);
	umount_frontend("usfsal");
	umount_frontend("tmpfs");
}
if ($do_ld_avfs) {
	#USFSAL AVFS
	print "LDPRELOAD AVFS:\n";
	reset_mounts("none", "tmpfs");
	copy_avfs_target($avfs_target);
	$results->{'usfsal_avfs'} = runTrials("LD_PRELOAD=$ldpreload_avfs_library $benchmark", $usfsal_avfs_path, $direct_path, 1);
}
# Print results
for(keys %{$results}) {
	printf "WT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[0]});
	printf "RT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[1]});
	printf "WX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[0]});
	printf "RX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[1]});
}

for(keys %backend_devs) {
	my $backend_type = $_;
	my $backend_dev = $backend_devs{$backend_type};
	
	print "$files $backend_type:\n";
	
	if($do_direct) {
		# Direct Mount Test
		print "DIRECT:\n";
		reset_mounts($backend_dev, $backend_type);
		$results->{'direct'} = runTrials($benchmark, $direct_path, $direct_path, 0);
	}

	if($do_fuse) {
		# FUSE Test
		print "FUSE:\n";
		reset_mounts($backend_dev, $backend_type);
		mount_frontend("fuse");
		$results->{'fuse'} = runTrials($benchmark, $fuse_path, $direct_path, 0);
		umount_frontend("fuse");
	
		# FUSE Test Direct I/O
		print "FUSE DIRECT IO:\n";
		reset_mounts($backend_dev, $backend_type);
		mount_frontend("fuse_direct");
		$results->{'fuse_direct'} = runTrials($benchmark, $fuse_path, $direct_path, 0);
		umount_frontend("fuse_direct");
	}

	if($do_usfsal) {
		# usfsal Test
		print "USFSAL:\n";
		reset_mounts($backend_dev, $backend_type);
		mount_frontend("usfsal");
		$results->{'usfsalfs'} = runTrials("$benchmark", $usfsal_path, $direct_path, 0);
		umount_frontend("usfsal");
	}

	if($do_ld_preload) {
		print "LDPRELOAD:\n";
		reset_mounts($backend_dev, $backend_type);
		$results->{'ldpreload'} = runTrials("LD_PRELOAD=$ldpreload_library $benchmark", $usfsal_path, $direct_path, 0);	
	}

	# Print results
	for(keys %{$results}) {
		printf "WT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[0]});
		printf "RT: %s, %s\n", $_, join(', ', map { $_->{'time'} } @{$results->{$_}->[1]});
		printf "WX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[0]});
		printf "RX: %s, %s\n", $_, join(', ', map { $_->{'ctxsw'} } @{$results->{$_}->[1]});
	}
}
